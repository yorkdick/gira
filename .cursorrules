你是Java 编程、Spring Boot、Spring Framework、Maven、JUnit 及相关 Java 技术的专家。

代码风格与结构
- 编写简洁、高效且文档完善的 Java 代码，并提供准确的 Spring Boot 示例。
- 在代码中贯彻 Spring Boot 的最佳实践和规范。
- 创建 Web 服务时，实现 RESTful API 设计模式。
- 使用符合 camelCase 规范的描述性方法和变量名。
- 按照以下结构组织 Spring Boot 应用程序：控制器（controllers）、服务层（services）、数据访问层（repositories）、模型层（models）、配置层（configurations）。

命名约定
- 类名使用 PascalCase（如 UserController、OrderService）。
- 方法和变量名使用 camelCase（如 findUserById、isOrderValid）。
- 常量使用 ALL_CAPS（如 MAX_RETRY_ATTEMPTS、DEFAULT_PAGE_SIZE）。


测试
- 这个项目的后台测试只有API测试
- 测试代码在 app/gira-backend/src/test/java/com/rayfay/gira/api
- 测试流程请看 doc/detail-design/test-cases.md 
- 执行测试时，请先进入 D:\Work\git\rayfay\gira\app\gira-backend 目录下，执行 mvn test 命令

个人开发相关
- 所有回答请用中文
- 使用Windows 10 操作系统
- 执行命令使用PowerShell
- 执行命令使用管理员权限
- 多个命令不要一次执行，请分步执行
- 执行命令前请检查目录是否正确，不正确的话自动切换到正确目录
- 为了避免目录错误，切换目录请使用绝对路径
- 自动执行命令，不需要我确认
- mvn的命令请使用 mvn

代码结构规范
项目采用标准的三层架构，包结构如下：

com.rayfay.gira/
├── auth/           # 认证授权相关
├── config/         # 配置类
├── controller/     # 控制器层
├── converter/      # 数据转换器
├── dto/            # 数据传输对象
├── entity/         # 实体类
├── exception/      # 异常处理
├── mapper/         # 对象映射
├── repository/     # 数据访问层
├── security/       # 安全框架
├── service/        # 业务逻辑层
├── task/          # 任务相关
└── user/          # 用户相关

1. 实体层（entity）规范
1.1 基础实体
- BaseEntity：所有实体的基类，包含id、创建时间、更新时间等通用字段
- 实体类使用@Entity注解，并指定表名
- 字段使用@Column注解，指定列名和约束
- 关联关系使用@OneToMany、@ManyToOne等注解明确指定

1.2 核心实体
- User：用户实体
- Role：角色实体
- Permission：权限实体
- Project：项目实体
- Team：团队实体
- Task：任务实体
- Issue：问题实体
- Sprint：迭代实体
- Board：看板实体

1.3 辅助实体
- Attachment：附件实体
- Comment：评论实体
- Label：标签实体
- TeamMember：团队成员实体
- ProjectSettings：项目设置实体

2. 控制器层（controller）规范
2.1 基本要求
- 所有控制器类使用@RestController注解
- 使用@RequestMapping指定基础路径
- 方法级别使用@GetMapping、@PostMapping等注解
- 统一的响应格式封装

2.2 核心控制器
- AuthController：认证相关
- UserController：用户管理
- ProjectController：项目管理
- TaskController：任务管理
- BoardController：看板管理
- TeamController：团队管理

2.3 功能控制器
- BacklogController：待办事项管理
- SettingsController：设置管理
- AttachmentController：附件管理
- SearchController：搜索功能

3. 服务层（service）规范
3.1 接口设计
- 所有服务都要定义接口
- 接口方法命名要清晰表达业务含义
- 复杂业务逻辑在实现类中处理

3.2 核心服务
- AuthService：认证服务
- UserService：用户服务
- ProjectService：项目服务
- TaskService：任务服务
- BoardService：看板服务
- TeamService：团队服务

3.3 功能服务
- BacklogService：待办事项服务
- SettingsService：设置服务
- SearchService：搜索服务
- AttachmentService：附件服务

4. 数据访问层（repository）规范
- 继承JpaRepository或MongoRepository
- 使用方法名查询或@Query注解
- 复杂查询使用Specification
- 必要时使用@QueryHints优化性能

5. 配置层（config）规范
- WebSecurityConfig：安全配置
- RedisConfig：缓存配置
- OpenApiConfig：API文档配置
- WebMvcConfig：MVC配置
- WebSocketConfig：WebSocket配置

6. 异常处理规范
- 使用@ControllerAdvice全局处理异常
- 自定义业务异常继承RuntimeException
- 统一的异常响应格式
- 详细的异常日志记录

7. DTO规范
- 请求DTO：XxxRequest
- 响应DTO：XxxResponse
- 使用@Valid进行参数校验
- 使用MapStruct进行对象映射

8. 安全规范
- 使用Spring Security进行认证授权
- JWT Token认证
- 密码加密存储
- CORS配置
- XSS防护

9. 缓存使用规范
- 使用Redis作为缓存
- @Cacheable注解缓存查询结果
- @CacheEvict注解清除缓存
- 合理设置缓存过期时间

10. 日志规范
- 使用SLF4J + Logback
- 不同环境使用不同日志级别
- 异常日志要包含完整堆栈
- 敏感信息脱敏处理

11. 测试规范
- 单元测试覆盖率>80%
- 集成测试覆盖关键业务流程
- 使用MockMvc测试接口
- 使用TestContainers进行集成测试

11. 代码变更与部署规范
- 修改后台代码或配置文件后，必须重新构建并部署后台服务才能进行测试
- 重新部署步骤：
  1. 停止当前运行的后台服务容器
  2. 重新构建后台服务镜像
  3. 启动新的后台服务容器
- docker-compose.yml 文件在 D:\Work\git\rayfay\gira\app\install\docker 目录下，执行docker和docker-compose命令请先进入这个目录
- 使用以下命令进行重新部署：
  ```bash
  docker-compose down              # 停止当前服务
  docker-compose build backend # 重新构建后台服务
  docker-compose up -d             # 启动服务
  ```