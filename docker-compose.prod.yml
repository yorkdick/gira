version: '3.8'

services:
  postgres:
    build:
      context: ./scripts/database
      dockerfile: Dockerfile
    container_name: gira-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gira-network
    restart: unless-stopped

  redis:
    image: redis:7.2.3
    container_name: gira-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gira-network
    restart: unless-stopped

  backend:
    build:
      context: ./app/gira-backend
      dockerfile: Dockerfile.prod
    container_name: gira-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      TZ: ${TZ}
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL}
      APP_UPLOAD_LOCATION: ${UPLOAD_PATH}
      APP_UPLOAD_MAX_FILE_SIZE: ${MAX_FILE_SIZE}
      APP_UPLOAD_ALLOWED_TYPES: ${ALLOWED_FILE_TYPES}
      APP_CORS_ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      APP_CORS_ALLOWED_METHODS: ${ALLOWED_METHODS}
    ports:
      - "8080:8080"
    volumes:
      - ./logs:${LOG_PATH}
      - ./uploads:${UPLOAD_PATH}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gira-network
    restart: unless-stopped

networks:
  gira-network:
    driver: bridge

volumes:
  logs:
    driver: local
  uploads:
    driver: local 